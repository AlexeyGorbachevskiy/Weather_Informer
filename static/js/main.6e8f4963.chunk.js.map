{"version":3,"sources":["components/WeatherInfo.module.css","components/Interface.module.css","components/Interface.jsx","components/WeatherInfo.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Interface","props","className","obj","form","onSubmit","getWeatherInfo","id","input","error","onChange","e","setCityName","target","value","setError","cityName","type","name","placeholder","search_btn","WeatherInfo","output","error_message","state","city","info","countryCode","cloudsDescription","icon","src","cloudsIcon","alt","temperature","visibility","humidity","pressure","sunrise","sunset","App","useState","undefined","setState","a","preventDefault","fetch","api_url","json","data","trim","cod","main","temp","tempToFahrenheit","Math","floor","pressureInMmHg","sunConvert","setOrRise","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","sys","country","weather","description","windDirection","wind","deg","windSpeed","speed","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6e8f4963.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"error_message\":\"WeatherInfo_error_message__2ejdo\",\"output\":\"WeatherInfo_output__3NAZf\",\"info\":\"WeatherInfo_info__3CW5b\",\"city\":\"WeatherInfo_city__1IQNN\",\"cloudsDescription\":\"WeatherInfo_cloudsDescription__1HfWL\",\"temperature\":\"WeatherInfo_temperature__1Tdwn\",\"visibility\":\"WeatherInfo_visibility__2chYN\",\"humidity\":\"WeatherInfo_humidity__2OKc_\",\"pressure\":\"WeatherInfo_pressure__3idag\",\"sunrise\":\"WeatherInfo_sunrise__1H7K_\",\"sunset\":\"WeatherInfo_sunset__Sucye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Interface_form__3qbyp\",\"error\":\"Interface_error__2Jfdc\",\"input\":\"Interface_input__nCxUj\",\"search_btn\":\"Interface_search_btn__2mlaD\"};","import React from 'react';\r\nimport obj from './Interface.module.css';\r\n\r\nfunction Interface(props) {\r\n    const onInputChangeHandler = e => {\r\n        props.setCityName(e.target.value);\r\n        props.setError(null);\r\n    }\r\n    return (\r\n        <form className={obj.form} onSubmit={props.getWeatherInfo}>\r\n            <input id={obj.input} className={props.error && obj.error} onChange={onInputChangeHandler}\r\n                   value={props.cityName}\r\n                   type='text' name='city' placeholder='Type a city...'/>\r\n            <span>\r\n            <button id={obj.search_btn} className=\"material-icons\">search</button>\r\n            </span>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Interface;","import React from 'react';\r\n\r\nimport obj from './WeatherInfo.module.css';\r\n\r\nfunction WeatherInfo(props) {\r\n    return (\r\n        <div className={obj.output}>\r\n\r\n            {props.error && <span className={obj.error_message}>{props.error}</span>}\r\n\r\n            {props.state.city &&\r\n            <div className={obj.info}>\r\n                <p className={obj.city}>{`${props.state.city}, ${props.state.countryCode}`}</p>\r\n                <p className={obj.cloudsDescription}>{props.state.cloudsDescription}</p>\r\n                <img className={obj.icon} src={`http://openweathermap.org/img/w/${props.state.cloudsIcon}.png`}\r\n                     alt='Weather icon should have been located here'/>\r\n                <span className={obj.temperature}>{`${props.state.temperature}C°`}</span>\r\n                <p className={obj.visibility}>{`Visibility: ${props.state.visibility} m`}</p>\r\n                <p className={obj.humidity}>{`Humidity: ${props.state.humidity}%`}</p>\r\n                <p className={obj.pressure}>{`Pressure: ${props.state.pressure} mmHg`}</p>\r\n                <p className={obj.sunrise}>{`Sunrise: ${props.state.sunrise} h`}</p>\r\n                <p className={obj.sunset}>{`Sunset: ${props.state.sunset} h`}</p>\r\n            </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherInfo;","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Interface from \"./components/Interface\";\r\nimport WeatherInfo from \"./components/WeatherInfo\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [state, setState] = useState({\r\n        countryCode: undefined,\r\n        city: undefined,\r\n        temperature: undefined,\r\n        visibility: undefined,\r\n        humidity: undefined,\r\n        pressure: undefined,\r\n        sunrise: undefined,\r\n        sunset: undefined,\r\n        cloudsDescription: undefined,\r\n        cloudsIcon: undefined,\r\n    });\r\n    const [cityName, setCityName] = useState('');\r\n    const [error, setError] = useState(null);\r\n\r\n\r\n    const API_KEY = '4dbe5b6f0197c71ad67531d031a966a6';\r\n    const getWeatherInfo = async (e) => {\r\n        e.preventDefault();\r\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${API_KEY}`);\r\n        const data = await api_url.json();\r\n        setCityName('');\r\n\r\n        if (cityName.trim() === '') {\r\n            setError('City field is required. Fill it out.');\r\n            setState({});\r\n            return;\r\n        }\r\n\r\n        if (data.cod[0] === '4') {\r\n            setError('Enter existing city.');\r\n            setState({});\r\n            return;\r\n        }\r\n\r\n        //temperature from Kelvin\r\n        const temperature = data.main.temp;\r\n        const tempToFahrenheit = Math.floor(temperature - 273.15);\r\n\r\n        //pressure from hpa to мм.рт.ст.\r\n        const pressure = data.main.pressure;\r\n        const pressureInMmHg = Math.floor(pressure * 0.75006);\r\n        const sunConvert = (setOrRise) => {\r\n            const date = new Date(setOrRise * 1000);\r\n            const hours = date.getHours();\r\n            const minutes = \"0\" + date.getMinutes();\r\n            const seconds = \"0\" + date.getSeconds();\r\n            const sunsetDate = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n            return sunsetDate\r\n        }\r\n\r\n        setState({\r\n            countryCode: data.sys.country,\r\n            city: data.name,\r\n            temperature: tempToFahrenheit,\r\n            //метры\r\n            visibility: data.visibility,\r\n            //%\r\n            humidity: data.main.humidity,\r\n            //  ,0mb\r\n            pressure: pressureInMmHg,\r\n            sunrise: sunConvert(data.sys.sunrise),\r\n            sunset: sunConvert(data.sys.sunset),\r\n            cloudsDescription: data.weather[0].description,\r\n            //?\r\n            cloudsIcon: data.weather[0].icon,\r\n            // направление ветра 40 градусов\r\n            windDirection: data.wind.deg,\r\n            //скорость ветра Km/h\r\n            windSpeed: data.wind.speed,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='container'>\r\n            <h2 className='text_header'>\r\n                {\r\n                    state.cloudsIcon ?\r\n                        <img className={'alternative_cloud'} width={'34px'}\r\n                             src={`http://openweathermap.org/img/w/${state.cloudsIcon}.png`}\r\n                             alt='Weather icon should have been located here'/>\r\n                        :\r\n                        <i id='cloud' className=\"material-icons\">wb_cloudy</i>\r\n                }\r\n\r\n                Weather\r\n                <i id='sun' className=\"material-icons\">wb_sunny</i>\r\n                <p className='informer_text'>Informer</p>\r\n                <hr/>\r\n            </h2>\r\n            <p className='brief_description'>Find out the weather in your city!</p>\r\n\r\n            <Interface setError={setError} error={error} setCityName={setCityName} cityName={cityName}\r\n                       getWeatherInfo={getWeatherInfo}/>\r\n            <WeatherInfo error={error} state={state}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}